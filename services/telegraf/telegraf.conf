# Copyright 2025 InfluxData
# Author: Suyash Joshi (sjoshi@influxdata.com)

[agent]
  interval = "${TELEGRAF_COLLECTION_INTERVAL}"
  flush_interval = "${TELEGRAF_COLLECTION_INTERVAL}"
  hostname = "${HOSTNAME}"

# [[inputs.http]]
#   urls = [
#     # "https://api.hobolink.licor.cloud/v1/data",
#     "https://api.hobolink.licor.cloud/v1/newa/21039797"
#   ]

#   # HTTP method
#   method = "GET"

#   ## Optional HTTP headers
#   headers = {
#     "accept" = "application/json",
#     "Authorization" = "Bearer ${HOBO_API_KEY}"
#   }

  # timeout = "30s"
  # data_format = "json"
  # json_query = "sensors"  # Process the sensors array

  # Extract metadata as tags
  # json_string_fields = ["measurement_type", "sensor_sn", "unit"]
  # json_time_key = "observations.0.timestamp"  # First observation's timestamp
  # json_time_format = "2006-01-02 15:04:05"

  # Convert observations array to separate metrics
  # json_array_name = "observations"
  # json_fields = ["value"]

  # [inputs.http.tags]
  #   logger_sn = "21039797"
  #   source = "hobo_newa"

  ## HTTP entity-body to send with POST/PUT requests.
  # body = ""

  ## HTTP Content-Encoding for write request body, can be set to "gzip" to
  ## compress body or "identity" to apply no encoding.
  # content_encoding = "identity"

  ## Optional Bearer token settings to use for the API calls.
  ## Use either the token itself or the token file if you need a token.
  # token = "eyJhbGc...Qssw5c"
  # token_file = "/path/to/file"

  ## Optional HTTP Basic Auth Credentials
  # username = "username"
  # password = "pa$$word"

  ## OAuth2 Client Credentials. The options 'client_id', 'client_secret', and 'token_url' are required to use OAuth2.
  # client_id = "clientid"
  # client_secret = "secret"
  # token_url = "https://indentityprovider/oauth2/v1/token"
  # scopes = ["urn:opc:idm:__myscopes__"]

  ## HTTP Proxy support
  # use_system_proxy = false
  # http_proxy_url = ""

  ## Optional TLS Config
  ## Set to true/false to enforce TLS being enabled/disabled. If not set,
  ## enable TLS only if any of the other options are specified.
  # tls_enable =
  ## Trusted root certificates for server
  # tls_ca = "/path/to/cafile"
  ## Used for TLS client certificate authentication
  # tls_cert = "/path/to/certfile"
  ## Used for TLS client certificate authentication
  # tls_key = "/path/to/keyfile"
  ## Password for the key file if it is encrypted
  # tls_key_pwd = ""
  ## Send the specified TLS server name via SNI
  # tls_server_name = "kubernetes.example.com"
  ## Minimal TLS version to accept by the client
  # tls_min_version = "TLS12"
  ## List of ciphers to accept, by default all secure ciphers will be accepted
  ## See https://pkg.go.dev/crypto/tls#pkg-constants for supported values.
  ## Use "all", "secure" and "insecure" to add all support ciphers, secure
  ## suites or insecure suites respectively.
  # tls_cipher_suites = ["secure"]
  ## Renegotiation method, "never", "once" or "freely"
  # tls_renegotiation_method = "never"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false

  ## Optional Cookie authentication
  # cookie_auth_url = "https://localhost/authMe"
  # cookie_auth_method = "POST"
  # cookie_auth_username = "username"
  # cookie_auth_password = "pa$$word"
  # cookie_auth_headers = { Content-Type = "application/json", X-MY-HEADER = "hello" }
  # cookie_auth_body = '{"username": "user", "password": "pa$$word", "authenticate": "me"}'
  ## cookie_auth_renewal not set or set to "0" will auth once and never renew the cookie
  # cookie_auth_renewal = "5m"

  ## Amount of time allowed to complete the HTTP request
  # timeout = "5s"

  ## List of success status codes
  # success_status_codes = [200]

  # Data format to consume.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
  # data_format = "influx"
  # data_format = "json"

[[outputs.influxdb_v2]]
  urls = ["http://${INFLUXDB_HOST}:8181"]
  token = "${INFLUXDB_TOKEN}"
  organization = "${INFLUXDB_ORG}"
  bucket = "${INFLUXDB_BUCKET}"
