# Configuration for telegraf agent
[agent]
  ## Default data collection interval for all inputs
  interval = "10s"
  ## Rounds collection interval to 'interval'
  ## ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  ## Telegraf will send metrics to outputs in batches of at most
  ## metric_batch_size metrics.
  ## This controls the size of writes that Telegraf sends to output plugins.
  metric_batch_size = 1000

  ## Maximum number of unwritten metrics per output.  Increasing this value
  ## allows for longer periods of output downtime without dropping metrics at the
  ## cost of higher maximum memory usage.
  metric_buffer_limit = 10000

  ## Collection jitter is used to jitter the collection by a random amount.
  ## Each plugin will sleep for a random time within jitter before collecting.
  ## This can be used to avoid many plugins querying things like sysfs at the
  ## same time, which can have a measurable effect on the system.
  collection_jitter = "0s"
  # collection_jitter = "30s" 

  ## Default flushing interval for all outputs. Maximum flush_interval will be
  ## flush_interval + flush_jitter
  flush_interval = "10s"
  # flush_interval = "60s"
  ## Jitter the flush interval by a random amount. This is primarily to avoid
  ## large write spikes for users running a large number of telegraf instances.
  ## ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"
  # flush_jitter = "5s"

  ## By default or when set to "0s", precision will be set to the same
  ## timestamp order as the collection interval, with the maximum being 1s.
  ##   ie, when interval = "10s", precision will be "1s"
  ##       when interval = "250ms", precision will be "1ms"
  ## Precision will NOT be used for service inputs. It is up to each individual
  ## service input to set the timestamp at the appropriate precision.
  ## Valid time units are "ns", "us" (or "Âµs"), "ms", "s".
  precision = ""

  ## Log at debug level.
  debug = true
  ## Log only error level messages.
  # quiet = false

  ## Log target controls the destination for logs and can be one of "file",
  ## "stderr" or, on Windows, "eventlog".  When set to "file", the output file
  ## is determined by the "logfile" setting.
  # logtarget = "file"

  ## Name of the file to be logged to when using the "file" logtarget.  If set to
  ## the empty string then logs are written to stderr.
  # logfile = ""

  ## The logfile will be rotated after the time interval specified.  When set
  ## to 0 no time based rotation is performed.  Logs are rotated only when
  ## written to, if there is no log activity rotation may be delayed.
  # logfile_rotation_interval = "0d"

  ## The logfile will be rotated when it becomes larger than the specified
  ## size.  When set to 0 no size based rotation is performed.
  # logfile_rotation_max_size = "0MB"

  ## Maximum number of rotated archives to keep, any older logs are deleted.
  ## If set to -1, no archives are removed.
  # logfile_rotation_max_archives = 5

  ## Pick a timezone to use when logging or type 'local' for local time.
  ## Example: America/Chicago
  # log_with_timezone = ""

  ## Override default hostname, if empty use os.Hostname()
  # hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = true

  skip_processors_after_aggregators = false

###############################################################################
# OUTPUTS
###############################################################################

# HOBO API -> InfluxDB v2 (bucket for API data)
[[outputs.influxdb_v2]]
  urls = ["http://${INFLUXDB_HOST}:${INFLUXDB_PORT}"]
  token = "$INFLUXDB_TOKEN"
  organization = "$INFLUXDB_ORG"
  bucket = "$INFLUXDB_BUCKET"

  ## The value of this tag will be used to determine the bucket.  If this
  ## tag is not set the 'bucket' option is used as the default.
  # bucket_tag = ""

  ## If true, the bucket tag will not be added to the metric.
  # exclude_bucket_tag = false

  ## Timeout for HTTP messages.
  # timeout = "5s"
  timeout = "10s"

  ## Additional HTTP headers
  # http_headers = {"X-Special-Header" = "Special-Value"}

  ## HTTP Proxy override, if unset values the standard proxy environment
  ## variables are consulted to determine which proxy, if any, should be used.
  # http_proxy = "http://corporate.proxy:3128"

  ## HTTP User-Agent
  # user_agent = "telegraf"

  ## Content-Encoding for write request body, can be set to "gzip" to
  ## compress body or "identity" to apply no encoding.
  # content_encoding = "gzip"

  ## Enable or disable uint support for writing uints influxdb 2.0.
  # influx_uint_support = false

  ## Optional TLS Config for use on HTTP connections.
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false

  # Explicit bucket tagging (matches your labels)
  [outputs.influxdb_v2.tagpass]
    manufacturer = ["hobo"]
    data_source = ["api"]

# MQTT -> InfluxDB v2 (bucket for MQTT data)
[[outputs.influxdb_v2]]
  urls = ["http://${INFLUXDB_HOST}:${INFLUXDB_PORT}"]
  token = "$INFLUXDB_TOKEN"
  organization = "$INFLUXDB_ORG"
  bucket = "env_sensors.DEBUG"
  # bucket = "$INFLUXDB_BUCKET"

  namepass = ["lora_uplink"] # Only show MQTT data

  timeout = "10s"

  [[outputs.influxdb_v2.tagpass]]
    data_source = ["mqtt"]

# STDOUT DEBUGGING -> View line protocol in terminal
[[outputs.file]]
  files = ["stdout"]
  data_format = "json"
  # json_string_fields = ["devAddr", "data"]
  namepass = ["lora_uplink"]  # Only show MQTT data

  # namepass = ["hobolink"]     # Only show API data
  # namepass = ["lora_uplink", "hobolink"] # Show all data

  [outputs.file.tagpass]
    data_source = ["mqtt"]

###############################################################################
# INPUTS
###############################################################################
# HOBO API input
[[inputs.exec]]
  ## Commands array
  commands = [
    "/opt/telegraf/scripts/hobolink_telegraf_fetcher.sh ${HOBO_API_TOKEN}" # Use ENV var for security
  ]

  ## Environment variables
  ## Array of "key=value" pairs to pass as environment variables
  ## e.g. "KEY=value", "USERNAME=John Doe",
  ## "LD_LIBRARY_PATH=/opt/custom/lib64:/usr/local/libs"
  # environment = []

  ## Timeout for each command to complete.
  # timeout = "5s"
  timeout = "9m"

  interval = "${TELEGRAF_COLLECTION_INTERVAL}"

  ## measurement name suffix (for separating different commands)
  # name_suffix = "_mycollector"

  ## Data format to consume.
  ## Each data format has its own unique set of configuration options, read
  ## more about them here:
  ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
  data_format = "influx"

  # Add metadata tags to all metrics
  [inputs.exec.tags]
    manufacturer = "hobo"    # Consistent with bucket labels
    data_source = "api"      # api/sd_card/lorawan
    # deployment = "field"     # field/lab/commercial
    # location = "field"      # field/lab/commercial

# MQTT input
[[inputs.mqtt_consumer]]

  name_override = "lora_uplink" # Name of the measurement
  ## MQTT server URL
  servers = [
    # "ssl://localhost:8883",
    "tcp://${MQTT_HOST}:${MQTT_PORT}"
  ]

  ## Protocol can be `3.1.1` or `5`. Default is `3.1.1`
  # protocol = "3.1.1"

  ## Topics to subscribe to
  topics = [
    # "sensors/#",
    # "${MQTT_TOPIC}",
    # "eu868/gateway/+/event/up"
    # "eu868/gateway/+/event/+",
    # "eu868/gateway/+/state/+",
    "application/+/device/+/event/up"
    # "#" # All topics
  ]

  ## The message topic will be stored in a tag specified by this value.  If set
  ## to the empty string no topic tag will be created.
  # topic_tag = "topic"

  ## When using a QoS of 1 or 2, you should enable persistent_session to allow
  ## resuming unacknowledged messages.
  ##   0 = at most once
  ##   1 = at least once
  ##   2 = exactly once
  qos = 0

  ## Connection timeout (ms)
  # connection_timeout = "30s"

  ## Client ID
  client_id = "telegraf-mqtt-client"

  ## Username and password to connect MQTT server.
  # username = "telegraf"
  # password = "metricsmetricsmetricsmetrics"

  ## Optional TLS Config
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false

  ## Client trace messages
  ## When set to true, and debug mode enabled in the agent settings, the MQTT
  ## client's messages are included in telegraf logs. These messages are very
  ## noisey, but essential for debugging issues.
  # client_trace = false

  ## Layout of the topics published.
  ## The following choices are available:
  ##   non-batch -- send individual messages, one for each metric
  ##   batch     -- send all metric as a single message per MQTT topic
  ## NOTE: The following options will ignore the 'data_format' option and send single values
  ##   field     -- send individual messages for each field, appending its name to the metric topic
  ##   homie-v4  -- send metrics with fields and tags according to the 4.0.0 specs
  ##                see https://homieiot.github.io/specification/
  # layout = "non-batch"

  ## HOMIE specific settings
  ## The following options provide templates for setting the device name
  ## and the node-ID for the topics. Both options are MANDATORY and can contain
  ## {{ .PluginName }} (metric name), {{ .Tag "key"}} (tag reference to 'key')
  ## or constant strings. The templays MAY NOT contain slashes!
  # homie_device_name = ""
  # homie_node_id = ""

  ## Data format to consume.
  # data_format = "influx"
  # data_format = "json_v2"
  data_format = "json"
  # data_format = "value"
  # data_type = "float"

  # tag_keys = ["deviceInfo.deviceName", "deviceInfo.applicationName", "deviceInfo.tenantName"]
  # json_string_fields = ["devAddr", "data"]


  ## Enable extracting tag values from MQTT topics
  ## _ denotes an ignored entry in the topic path
  # [[inputs.mqtt_consumer.topic_parsing]]
  #   topic = "sensors/+/+"
  #   measurement = "sensor_data"
  #   tags = ["sensor_type", "sensor_id"]
  #   fields = ""
  ## Value supported is int, float, unit
  #   [[inputs.mqtt_consumer.topic.types]]
  #      key = type

  # Add metadata tags to all metrics
  [inputs.mqtt_consumer.tags]
    manufacturer = "lora"    # Consistent with bucket labels
    data_source = "mqtt"     # api/sd_card/lorawan
    # deployment = "field"     # field/lab/commercial
    # location = "field"      # field/lab/commercial



###############################################################################
#                                PROCESSORS                                   #
###############################################################################
# [[processors.starlark]]
#   # name of the processor
#   namepass = ["lora_uplink"]
#   # name of the processor
#   name_override = "lora_uplink"
#   # path to the script
#   source = '''
# def apply(metric):
#     import base64
#     import struct

#     b64data = metric.fields.get("data")
#     if not b64data:
#         return metric

#     try:
#         decoded = base64.b64decode(b64data)

#         # Example: Temperature (int16), Humidity (uint16), CO2 (uint16)
#         temperature, humidity, co2 = struct.unpack(">hHH", decoded[:6])

#         metric.fields["temperature"] = temperature / 10.0
#         metric.fields["humidity"] = humidity / 10.0
#         metric.fields["co2"] = co2
#     except:
#         pass

#     return metric
# '''