# Read current weather and forecasts data from openweathermap.org
# [[inputs.openweathermap]]
#   ## OpenWeatherMap API key.
#   app_id = "$OWM_API_KEY"
#   city_id = ["${OWM_CITY_ID}"]
#   lang = "en"

#   ## APIs to fetch; can contain "weather" or "forecast".
#   fetch = ["weather"]

#   ## OpenWeatherMap base URL
#   # base_url = "https://api.openweathermap.org/"

#   ## Timeout for HTTP response.
#   # response_timeout = "5s"

#   ## Preferred unit system for temperature and wind speed. Can be one of
#   ## "metric", "imperial", or "standard".
#   units = "metric"

#   ## Query interval; OpenWeatherMap weather data is updated every 10
#   ## minutes.
#   interval = "2m"

#   # Add tags for better organization
#   [inputs.openweathermap.tags]
#     data_source = "openweathermap"

[[inputs.http]]
  urls        = [
    "https://${OWM_API_URL}/data/${OWM_API_VERSION}/weather?lat=${LATITUDE}&lon=${LONGITUDE}&appid=${OWM_API_KEY}&units=metric"
  ]
  timeout         = "10s"
  interval        = "${TELEGRAF_COLLECTION_INTERVAL}"
  data_format     = "json"
  name_override   = "weather_data_OWM"

  ## Keep the five weather fields plus the city "id"
  fieldinclude   = ["main_temp","wind_speed","wind_gust","main_pressure","main_humidity","id"]

  tagexclude  = ["url"]

  [inputs.http.tags]
    data_source = "openweathermap"

[[processors.starlark]]
  namepass = ["weather_data_OWM"]
  source = '''
def apply(metric):
    out = []
    # 1) Pop "id" from the fields and promote it to a tag (formatted as full string)
    if "id" in metric.fields:
        # Convert to int first to avoid scientific notation, then to string
        id_value = str(int(metric.fields["id"]))
        metric.tags["id"] = id_value
        metric.fields.pop("id")
    
    # 2) For each weather field, emit a new measurement
    for fld in ["main_temp", "wind_speed", "wind_gust", "main_pressure", "main_humidity"]:
        if fld in metric.fields:
            m = Metric(
                name=fld,
                tags=metric.tags,
                fields={"value": metric.fields[fld]}
            )
            m.time = metric.time
            out.append(m)
    return out
'''
  # Optional: Add a tag to all metrics
  # [processors.starlark.tags]
  #   data_source = "openweathermap"

[[processors.converter]]
  namepass = ["main_temp","wind_speed","wind_gust","main_pressure","main_humidity"]
  [processors.converter.fields]
    float = ["value"]