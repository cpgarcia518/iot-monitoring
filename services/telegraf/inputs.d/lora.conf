# Author: MSc. Carlos Alejandro Perez Garcia
# Email: cpgarcia518@gmail.com
# Created: 2025-05-05
# Description: Telegraf configuration for LoRaWAN MQTT collection
# This configuration file is used to collect data from LoRaWAN devices using MQTT.
# It subscribes to the specified MQTT topics and processes the incoming messages.
# The data is then sent to InfluxDB for storage and analysis.

[[inputs.mqtt_consumer]]
  name_override = "lora_uplink" # Name of the measurement
  ## MQTT server URL
  servers = [
    # "ssl://localhost:8883",
    "tcp://${MQTT_HOST}:${MQTT_PORT}",
    # "tcp://10.8.1.61:1883",
  ]

  ## Protocol can be `3.1.1` or `5`. Default is `3.1.1`
  # protocol = "3.1.1"

  ## Topics to subscribe to
  topics = [
    # "sensors/#",
    # "${MQTT_TOPIC}",
    # "eu868/gateway/+/event/up"
    # "eu868/gateway/+/event/+",
    # "eu868/gateway/+/state/+",
    "application/+/device/+/event/up"
    # "#" # All topics
  ]

  ## The message topic will be stored in a tag specified by this value.  If set
  ## to the empty string no topic tag will be created.
  topic_tag = ""

  ## When using a QoS of 1 or 2, you should enable persistent_session to allow
  ## resuming unacknowledged messages.
  ##   0 = at most once
  ##   1 = at least once
  ##   2 = exactly once
  qos = 0

  ## Data format to consume.
  # data_format = "influx"
  data_format = "json_v2"
#   data_format = "json"
  # data_format = "value"
  # data_type = "float"



  # Remove the topic tag if not needed
  # topic_tag = ""

  # Optional: Add constant tags
#   [inputs.mqtt_consumer.tags]
#     manufacturer = "lora"
#     protocol = "MQTT"

  # JSON v2 parser configuration
  [[inputs.mqtt_consumer.json_v2]]
    measurement_name = "lora_uplink"
    timestamp_path = "time"
    timestamp_format = "2006-01-02T15:04:05.999999999Z07:00"

    # Tags extraction
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "devAddr"
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "deviceInfo.deviceName"
      rename = "device_name"
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "deviceInfo.tenantName"
      rename = "tenant_name"
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "deviceInfo.devEui"
      rename = "dev_eui"
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "deviceInfo.deviceProfileName"
      rename = "device_profile"
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "rxInfo.0.gatewayId"
      rename = "gateway_id"
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "fPort"
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "dr"
    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "rxInfo.0.location.latitude"
      type = "float"
      rename = "gateway_lat"

    [[inputs.mqtt_consumer.json_v2.tag]]
      path = "rxInfo.0.location.longitude"
      type = "float"
      rename = "gateway_lon"



    # Fields extraction
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "data"
      type = "string"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "fCnt"
      type = "int"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "txInfo.frequency"
      type = "int"
      rename = "frequency"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "txInfo.modulation.lora.spreadingFactor"
      type = "int"
      rename = "spreading_factor"
    [[inputs.mqtt_consumer.json_v2.field]]
      path = "txInfo.modulation.lora.bandwidth"
      type = "int"
      rename = "bandwidth"

  # Additional constant tags
  [inputs.mqtt_consumer.tags]
    data_source = "lora"
    protocol = "MQTT"


  # Base64 data decoding processor
#   [[processors.starlark]]
#     source = '''
# def apply(metric):
#     if metric.name == "lora_uplink" and "data" in metric.fields:
#         import base64
#         import struct
        
#         try:
#             decoded = base64.b64decode(metric.fields["data"])
#             buf = bytearray(decoded)
            
#             # Initialize parsed fields
#             parsed = {
#                 "vin": None,
#                 "battery_status": None,
#                 "temperatures": [],
#                 "humidity": None,
#                 "pressure": None,
#                 "temp_pressure": None,
#                 "lux": None,
#                 "parse_error": None
#             }
            
#             # VIN (2 bytes)
#             if len(buf) >= 2:
#                 parsed["vin"] = struct.unpack('>H', buf[:2])[0] / 100.0
#                 buf = buf[2:]
            
#             # Battery Status (1 byte)
#             if len(buf) >= 1:
#                 parsed["battery_status"] = int(buf[0])
#                 buf = buf[1:]
            
#             # Temperatures (1 byte count + n*2 bytes)
#             if len(buf) >= 1:
#                 temp_count = buf[0]
#                 buf = buf[1:]
#                 if len(buf) >= temp_count * 2:
#                     temps = []
#                     for i in range(temp_count):
#                         temp = struct.unpack('>h', buf[i*2:i*2+2])[0]
#                         temps.append(temp / 100.0)
#                     parsed["temperatures"] = temps
#                     buf = buf[temp_count*2:]
            
#             # Humidity (2 bytes)
#             if len(buf) >= 2:
#                 parsed["humidity"] = struct.unpack('>H', buf[:2])[0] / 100.0
#                 buf = buf[2:]
            
#             # Pressure (4 bytes)
#             if len(buf) >= 4:
#                 parsed["pressure"] = struct.unpack('>f', buf[:4])[0]
#                 buf = buf[4:]
            
#             # TempPressure (2 bytes)
#             if len(buf) >= 2:
#                 parsed["temp_pressure"] = struct.unpack('>h', buf[:2])[0] / 100.0
#                 buf = buf[2:]
            
#             # Lux (4 bytes)
#             if len(buf) >= 4:
#                 parsed["lux"] = struct.unpack('>f', buf[:4])[0]
#                 buf = buf[4:]
            
#             # Error byte (1 byte)
#             if len(buf) >= 1:
#                 err_num = buf[0]
#                 err_str = bin(err_num)[2:].zfill(8)
#                 parsed.update({
#                     "err_num": err_num,
#                     "err_str": err_str,
#                     "err_vin": int(err_str[7]),
#                     "err_htu": int(err_str[6]),
#                     "err_pressure": int(err_str[5]),
#                     "err_lux": int(err_str[4]),
#                     "fail": 0
#                 })
            
#             # Add parsed fields to metric
#             for k, v in parsed.items():
#                 if v is not None:
#                     metric.fields[k] = v
                    
#         except Exception as e:
#             metric.fields["parse_error"] = str(e)
#             metric.fields["parse_fail"] = 1
            
#     return metric
# '''
